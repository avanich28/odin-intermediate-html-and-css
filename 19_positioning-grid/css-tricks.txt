Topic: Properties for the parent (Grid Container)

1. display: grid | inline-grid

2. grid-template-columns / grid-template-rows: <line-name>? <track-size> 

3. grid-template-areas
- . means empty space

.container {
  grid-template-areas: 
    "<grid-area-name> | . | none | ..."
    "...";
}

4. grid-template

.container {
  grid-template: none | <grid-template-rows> / <grid-template-columns>;
}

❓
.container {
  grid-template:
    [row1-start] "header header header" 25px [row1-end]
    [row2-start] "footer footer footer" 25px [row2-end]
    / auto 50px auto;
}

5. column-gap / row-gap (grid-column-gap / grid-row-gap)

6. gap (grid-gap)

.container {
  gap: <grid-row-gap> <grid-column-gap>;
}

/////////////////////////

-  Move grid track in grid container -

1. justify-items
- adjust width

.container {
  justify-items: start | end | center | stretch;
}

2. align-items
- adjust height

.container {
  align-items: start | end | center | stretch;
}

3. place-items: <align-items> / <justify-items>

.center {
  display: grid;
  place-items: center; (or center start)
}

4. justify-self
5. align-self

/////////////////////////

- Contents (move grid container) -

1. justify-content
- adjust x-axes

.container {
  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;    
}

2. align-content
- adjust y-axes

.container {
  align-content: start | end | center | stretch | space-around | space-between | space-evenly;    
}

3. place-content: <align-content> / <justify-content>

///////////////////////////

- auto -

1. grid-auto-columns / grid-auto-rows: <track-size>
- auto-generated grid tracks (aka implicit grid tracks).

2. grid-auto-flow
- default = row
- places the items in (row)

.container {
  grid-auto-flow: row | column | row dense | column dense;
}

3. grid
- shorthand

.container {
    grid: [ auto-flow && dense? ] <grid-auto-rows>? / <grid-template-columns>
}

///////////////////////////

Topic: Properties for the Children (Grid Items)

- span

1. grid-column-start
grid-column-end
grid-row-start
grid-row-end

- span items in grid container, not track!

.item {
  grid-column-start: <number> | <name> | span <number> | span <name> | auto;
  
  grid-column-end: <number> | <name> | span <number> | span <name> | auto;
  
  grid-row-start: <number> | <name> | span <number> | span <name> | auto;
  
  grid-row-end: <number> | <name> | span <number> | span <name> | auto;
}

2. z-index
- use when grid is overlap

3. grid-column / grid-row

.item {
  grid-column: <start-line> / <end-line> | <start-line> / span <value>;

  grid-row: <start-line> / <end-line> | <start-line> / span <value>;
}

4. grid-area
- shorthand
- number line / name

.item {
  grid-area: <name> | <row-start> / <column-start> / <row-end> / <column-end>;
}

////////////////////////

- Move grid cell -

- similar to justify-item and align-item but move only a single grid cell

1. justify-self
- move x-axis

.item {
  justify-self: start | end | center | stretch;
}

2. align-self
- move y-axis

.item {
  align-self: start | end | center | stretch;
}

3. place-self 
- shorthand

.item {
  place-self: <align-self> / <justify-self>;
}

////////////////////////////

Topic: Special Units & Functions

1. fr units

2. minmax(100px, 1fr)

grid-template-columns: minmax(100px, 1fr) 3fr;

3. repeat()
- auto-fill -> fit rows ❓
- auto-fit  -> fit columns

grid-template-columns: 
  repeat(auto-fit, minmax(250px, 1fr));

4. subgrid
-  inherits grid lines from the parent grid.

.parent-grid {
  display: grid;
  grid-template-columns: repeat(9, 1fr);
}
.grid-item {
  grid-column: 2 / 7;

  display: grid;
  grid-template-columns: subgrid;
}

5. Sizing keys
- min-content -> the length of maximum size of word in the sentence

- max-content -> the length of whole sentence

- auto -> like fr units, except that they “lose” the fight in sizing against fr units 

6. Masonary ❓